Goal: Create 2 separate classes to run compression and decompression. Optimize write method to use the boolean argument force. 

 

(1) Create a class called huff.java.

The main method in huff.java should call:

-initialize()

-showCounts()

-showCodings()

-write()

huff.java should take 2 arguments (we went over how to run your code with arguments in eclipse in class):

- true|false to indicate if we will force the compression or not

- the name of the file you are compressing

huff.java should create the compressed file

 

(2) Create a class called unhuff.java.

The main method in unhuff.java should call:

-uncompress()

unhuff.java should take 1 argument (we went over how to run your code with arguments in eclipse in class):

- the name of the file you want to decompress 

huff.java should create the uncompressed file

 

(3) Compute the expected size of the compressed file

Before writing the compressed file, you should compute its expected size.

To get the expected size (in bits) of the compressed file, you will:

- Add the size of the MAGIC_NUMBER (32 bits)

- Add the size of the Huffman Tree (you might want to write a new method):

add 1 for each internal node

add 10 for each leaf node

- Add the size of the compressed content (you might want to write a new method):

  For each char add the length of its huff code multiply by its frequency (counts computed in Part I) 

 

(4) Modify write() to use the force parameter

- If force is true then you should just write the compressed file

- If force is false then you should compare the expected size of the compressed file and the 

size of the original file.

      * If the size of the original file is less than the expected size of the compressed file, you should 

         print the size of both files along with a message stating that the compression was not performed. 

       * If the size of the original file is greater than the expected size of the compressed file, you should 

         print the size of both files and perform the compression.

 

Get the size of the original file:

 For each char in the original file, add 8  multiply by its frequency  (counts computed in Part I) 